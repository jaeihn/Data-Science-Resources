# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution ()")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.5, binwidth = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution ()")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.5, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution ()")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution ()")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap] = mu[Adelie], ")")))
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap]~=~mu[Adelie], ")")))
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap], "=", mu[Adelie], ")")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap], "=", mu[Adelie], ")
of Mean Body Mass (g) in Chinstrap and Adelie Penguins")))
penguin_null_dist_plot
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap], "=", mu[Adelie], ")",
"of Mean Body Mass (g) in Chinstrap and Adelie Penguins")))
penguin_null_dist_plot
knitr::opts_chunk$set(echo = TRUE)
library(infer)
library(palmerpenguins)
library(testthat)
library(digest)
library(tidyverse)
library(knitr)
library(cowplot)
library(datateachr)
salary <- read_csv("data/salary.csv")
glimpse(salary)
set.seed(552)
bootstrap_estimates <- salary |>
specify(response = Remuneration) |>
generate(reps = 3000, type = "bootstrap") |>
calculate(stat = "median")
ci <- bootstrap_estimates |>
get_confidence_interval(level = 0.90, type = "percentile")
answer1_2_lower_ci <-  ci |> pull(lower_ci)
answer1_2_upper_ci <- ci |> pull(upper_ci)
answer1_2_lower_ci
answer1_2_upper_ci
. = ottr::check("tests/Q1.2.R")
sample_median <- salary |>
pull(Remuneration) |>
median()
boot_CI_median_plot <-
# From the bootstrap distribution
bootstrap_estimates |>
# Plot a histogram of the bootstrap sample medians
ggplot(aes(x = stat)) +
geom_histogram(bins=45, color = "white", fill = "grey") +
labs(x = "Bootstrap Sample Median Salary", y = "Counts") +
ggtitle("Bootstrap Distribution of r = 3,000 based on Salary Sample of n = 3,003") +
geom_vline(xintercept = answer1_2_lower_ci, color = "blue") +
annotate("label", x = answer1_2_lower_ci - 400, y = 200, size = 3,
label = paste("5th-Percentile = ", answer1_2_lower_ci) , color = "blue") +
geom_vline(xintercept = answer1_2_upper_ci, color = "blue") +
annotate("label", x = answer1_2_upper_ci + 400, y = 200, size = 3,
label = paste("95th-Percentile = ", answer1_2_upper_ci) , color = "blue") +
geom_vline(xintercept = sample_median, color = "red") +
annotate("label", x = sample_median + 600, y = 300, size = 3,
label = paste("Sample Median = ", sample_median) , color = "red")
boot_CI_median_plot
# Poll's sample size
n <- 2042
# Party vector
party <- c("CPC", "Liberals", "NDP", "Bloc", "PPC", "Green", "Others")
# Setting up sampled voting proportions
# We make an adjustment on Others to 0.0302, instead of 0.01 as in the
# ARI's report, so the other estimated proportions in our computational
# analysis will match.
prop <- c(0.32, 0.3, 0.2, 0.07, 0.05, 0.03, 0.0302)
# Voting counts
votes <- round(n * prop, 0)
# Creating data
polls <- data.frame(party = rep(party, votes))
head(polls)
tail(polls)
#' Converts a multi-level column into a binary column for a specific level
#'
#' @param data A data frame of interest
#' @param col A column within `data`, containing multiple levels
#' @param success The specific value within `col` that will be treated as the
#' success criteria
#'
#' @return A data frame
#' `data` with the `col` column mutated in place.
#' `col` will now contain `"YES"` instead of values equal to `success`,
#' and `"NO"` for any value other than `success`.
#'
#' @examples
#' binarize(polls, party, "CPC")
binarize <- function(data, col, success) {
data |> mutate({{ col }} := case_when({{ col }} == success ~ "YES",
TRUE ~ "NO"))
}
answer2_1 <- data.frame(party) |>
add_column(lower_ci = NA,
upper_ci = NA,
p_hat = NA)
for (p in party){
# Preprocess columns into binary ("success" for a vote corresponding to the party)
party_polls <- binarize(polls, party, p)
# Draw bootstrapping distribution
set.seed(552)
bootstrap_est <- party_polls |>
specify(response = party, success = "YES") |>
generate(reps = 15000, type = "bootstrap") |>
calculate(stat = "prop")
# Update data frame
answer2_1["p_hat"][answer2_1["party"] == p] <-
bootstrap_est$stat |> mean() |> round(2)
ci <- bootstrap_est |>
get_confidence_interval(level = 0.95, type = "percentile")
answer2_1["lower_ci"][answer2_1["party"] == p] <- round(ci$lower_ci, 2)
answer2_1["upper_ci"][answer2_1["party"] == p] <- round(ci$upper_ci, 2)
}
answer2_1
. = ottr::check("tests/Q2.1.R")
# Reference for plotting bar plots with error bars
# http://www.sthda.com/english/wiki/ggplot2-error-bars-quick-start-guide-r-software-and-data-visualization
party_bar_plot <- (
ggplot(answer2_1, aes(x = reorder(party, -p_hat), y = p_hat, fill = party)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width=.2) +
labs(x = "Party", y = expression(hat(p)[party~k])) +
ggtitle("Election Parties by Estimated Voting Proportion based on r = 15,000 Bootstraps
of Sample size n = 2,042 ") +
guides(fill = "none")
)
party_bar_plot
# Note Others has a proportion of 0.01 since this is the estimate
# reported in the summary.
ARI_results <- data.frame(
party = c(
"CPC", "Liberals", "NDP", "Bloc",
"PPC", "Green", "Others"
),
p_hat = c(0.32, 0.3, 0.2, 0.07, 0.05, 0.03, 0.01))
ARI_results <- ARI_results %>%
mutate(lower_ci = p_hat - 0.022, upper_ci = p_hat + 0.022)
kable(filter(ARI_results, party != "Others"),
col.names = c(
"Party", "Proportion Estimate",
"95% Theoretically Normal Lower Bound",
"95% Theoretically Normal Upper Bound"
),
caption = "Angus Reid Institute point and classical interval
estimates at 95% confidence."
)
# Uncomment the code below before proceeding
#   kable(filter(answer2_1, party != "Others")[, c(1, 4, 2, 3)],
#   col.names = c(
#     "Party", "Proportion Estimate",
#     "95% Bootstrap Lower Bound",
#     "95% Bootstrap Upper Bound"
#   ),
#   caption = "Your point and bootstap interval estimates
#  at 95% confidence."
# )
ARI_CPC_plot <- NULL
ARI_Liberals_plot <- NULL
ARI_NDP_plot <- NULL
ARI_Bloc_plot <- NULL
ARI_PPC_plot <- NULL
ARI_Green_plot <- NULL
Bootstrap_CPC_plot <- NULL
Bootstrap_Liberals_plot <- NULL
Bootstrap_NDP_plot <- NULL
Bootstrap_Bloc_plot <- NULL
Bootstrap_PPC_plot <- NULL
Bootstrap_Green_plot <- NULL
# YOUR CODE HERE
plot_grid(ARI_CPC_plot, Bootstrap_CPC_plot,
ARI_Liberals_plot, Bootstrap_Liberals_plot,
ARI_NDP_plot, Bootstrap_NDP_plot,
ARI_Bloc_plot, Bootstrap_Bloc_plot,
ARI_PPC_plot, Bootstrap_PPC_plot,
ARI_Green_plot, Bootstrap_Green_plot,
nrow = 6
)
penguins_sample <- penguins %>%
select(species, body_mass_g) %>%
drop_na()
nrow(penguins_sample)
answer3_1 <- penguins_sample |>
group_by(species) |>
summarise(estimated_mean = round(mean(body_mass_g), 2)) |>
add_column(lower_ci = NA,
upper_ci = NA)
#' Computes the 95% bootstrap CIs by penguins species.
#' Sets the seed to 552 before drawing each bootstrap distribution
#'
#' @param spec a character vector, containing the name of penguin species
#'
#' @return A data frame, 1x2
#' The columns contain the lowen and upper bound of the 95% CI intervals
#'
#' @examples
#' ci_mean("Adelie")
ci_mean <- function(spec) {
species_penguins <- penguins |> filter(species == spec)
set.seed(552)
bootstrap_est <- species_penguins |>
specify(response = body_mass_g) |>
generate(reps = 15000, type = "bootstrap") |>
calculate(stat = "mean")
return (bootstrap_est |>
get_confidence_interval(level = 0.95, type = "percentile"))
}
for (s in answer3_1$species) {
ci <- ci_mean(s)
answer3_1["lower_ci"][answer3_1["species"] == s] <- round(ci$lower_ci, 2)
answer3_1["upper_ci"][answer3_1["species"] == s] <- round(ci$upper_ci, 2)
}
answer3_1
. = ottr::check("tests/Q3.1.R")
penguin_sample_plot <- (
ggplot(penguins_sample, aes(x = species, y = body_mass_g, fill = species)) +
geom_violin() +
stat_summary(fun = "mean",
geom = "crossbar",
color = "red") +
geom_errorbar(data = answer3_1,
aes(x = species, y = estimated_mean,
ymin = lower_ci, ymax = upper_ci)) +
labs(x = "Species", y = "Body Mass (g)") +
guides(fill = "none") +
ggtitle("Sample Distribution (n = 342) of Penguin Body Mass (g)
by Species with 95% Bootstrap CIs based on r = 15,000")
)
penguin_sample_plot
chinstrap_adelie_est <-
penguins_sample[grepl("Adelie|Chinstrap", penguins_sample$species),] |>
group_by(species) |>
summarize(estimated_mean = mean(body_mass_g)) |>
arrange(desc(species))
set.seed(552)
null_distr_bodymass <- (
# Select penguin species `Adelie` and `Chinstrap`
penguins_sample[grepl("Adelie|Chinstrap", penguins_sample$species),] |>
specify(formula = body_mass_g ~ species) |>
hypothesise(null = "independence") |>
generate(reps = 1000, type = "permute") |>
calculate(stat = "diff in means", order = c("Chinstrap", "Adelie"))
)
null_distr_bodymass
chinstrap_adelie_test_stat <- diff(chinstrap_adelie_est$estimated_mean)
chinstrap_adelie_p_value <- null_distr_bodymass |>
get_p_value(obs_stat = chinstrap_adelie_test_stat, direction = "two-sided")
chinstrap_adelie_test_stat
chinstrap_adelie_p_value
upper_threshold <- quantile(null_distr_bodymass$stat, 0.975)
lower_threshold <- quantile(null_distr_bodymass$stat, 0.025)
penguin_null_dist_plot <- null_distr_bodymass |>
ggplot(aes(x = stat)) +
geom_density(color = "#00AFBB", fill = "#00AFBB", alpha = 0.3) +
geom_histogram(aes(y = ..density..), color = "white", fill = "#F14F4F",
alpha = 0.3, bins = 50) +
geom_vline(xintercept = chinstrap_adelie_test_stat, color = "red") +
annotate("label", x = chinstrap_adelie_test_stat, y = 0.0075, size = 3,
label = paste("Test Statistic = ", round(chinstrap_adelie_test_stat,2))
, color = "red") +
# Quantile thresholds for two-sided test
geom_vline(xintercept = lower_threshold, color = "blue", lty = 5) +
annotate("label", x = lower_threshold, y = 0.006, size = 3,
label = paste("Lower Threshold = ", round(lower_threshold,2)),
color = "blue") +
geom_vline(xintercept = upper_threshold, color = "blue", lty = 5) +
annotate("label", x = upper_threshold, y = 0.006, size = 3,
label = paste("Upper Threshold = ", round(upper_threshold,2)),
color = "blue") +
labs(x = expression(delta), y = "Density") +
ggtitle(expression(paste("Null Distribution (", mu[Chinstrap], "=", mu[Adelie], ") ",
"of Mean Body Mass (g) in Chinstrap and Adelie Penguins")))
penguin_null_dist_plot
# STEP 1
sunset_population <- vancouver_trees |>
filter(neighbourhood_name == "SUNSET")
# STEP 2
sunset_population <- sunset_population |>
select(diameter) |>
mutate(diameter = 0.0254 * diameter)
# STEP 3
pop_mean_diameter <- sunset_population |>
pull(diameter) |>
mean()
bootstrap_ci_mean <- function(population, col) {
sample <- population |> rep_sample_n(size = 150)
bootstrap <- sample |>
specify(response = {{ col }}) |>
generate(reps = 1000, type = "bootstrap") |>
calculate(stat = "mean")
ci <- bootstrap |>
get_confidence_interval(level = 0.95, type = "percentile")
}
bootstrap_CI_df <- data.frame(
i = numeric(0),
lower_ci = numeric(0),
upper_ci = numeric(0)
)
set.seed(552)
for (i in 1:200) {
ci <- bootstrap_ci_mean(sunset_population, diameter)
bootstrap_CI_df <- bootstrap_CI_df |>
add_row(i = i, lower_ci = ci$lower_ci, upper_ci = ci$upper_ci)
}
bootstrap_CI_plot <- ggplot() +
geom_vline(xintercept = pop_mean_diameter, color = 'red') +
geom_segment(data = bootstrap_CI_df,
aes(x = lower_ci, xend = upper_ci,
y = i, yend = i,
color = (lower_ci < pop_mean_diameter
& upper_ci > pop_mean_diameter))) +
scale_colour_manual(name = 'Captured',
values = setNames(c('grey','black'),c(T, F))) +
labs(x = "Mean Diameter (m)", y = "Confidence Interval Number") +
ggtitle("200 percentile-based 95% Bootstrapped Confidence Intervals (r = 1000) for Mean Tree Diameters in SUNSET Neighborhood (n = 150)")
bootstrap_CI_plot
bootstrap_CI_df |>
filter(lower_ci < pop_mean_diameter & upper_ci > pop_mean_diameter) |>
nrow() / 200
bootstrap_CI_plot <- ggplot() +
geom_vline(xintercept = pop_mean_diameter, color = 'red') +
geom_segment(data = bootstrap_CI_df,
aes(x = lower_ci, xend = upper_ci,
y = i, yend = i,
color = (lower_ci < pop_mean_diameter
& upper_ci > pop_mean_diameter))) +
scale_colour_manual(name = 'Captured',
values = setNames(c('grey','black'),c(T, F))) +
labs(x = "Mean Diameter (m)", y = "Confidence Interval Number") +
ggtitle("200 percentile-based 95% Bootstrapped Confidence Intervals (r = 1000)
for Mean Tree Diameters in SUNSET Neighborhood (n = 150)")
bootstrap_CI_plot
